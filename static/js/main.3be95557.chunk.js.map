{"version":3,"sources":["components/SearchField/SearchField.tsx","components/Gallery/Gallery.tsx","App.tsx","reportWebVitals.js","index.js"],"names":["SearchField","fetchForData","handleInputThrottled","_","className","Form","Group","controlId","Label","column","Control","type","name","onChange","event","target","value","Gallery","list","movies","shouldShowSpinner","isLoading","errorHandler","Spinner","animation","role","length","map","el","index","alt","src","App","props","API_KEY","param","notEmpty","setState","isLoaded","fetch","then","resp","json","response","catch","message","console","log","moviesToPass","this","state","Jumbotron","React","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qTAsBeA,G,MAlBK,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,aACfC,EAAuBC,IAAWF,EAAc,MAEtD,OACE,qBAAKG,UAAW,YAAhB,SACE,eAACC,EAAA,EAAKC,MAAN,CAAYC,UAAU,aAAtB,UACE,cAACF,EAAA,EAAKG,MAAN,CAAYC,OAAO,KAAnB,yCACA,cAACJ,EAAA,EAAKK,QAAN,CACEC,KAAK,OACLC,KAAK,QACLC,SAAU,SAACC,GAAYZ,EAAqBY,EAAMC,OAAOC,iB,QCoBpDC,G,MA9BC,SAAC,GAA2B,IAGlBC,EAHPC,EAAwB,EAAxBA,OACbC,GADqC,EAAhBC,UAcrBC,EAAeH,GAAUA,EAAM,MAAYA,EAAM,MAAY,GAEjE,OACE,sBAAKf,UAAW,UAAhB,UACGgB,GACC,cAACG,EAAA,EAAD,CAASC,UAAU,SAASC,KAAK,SAAjC,SACE,sBAAMrB,UAAU,UAAhB,0BAGJ,8BAAMe,GAAUA,EAAOO,OAAS,GApBZR,EAoBiCC,EAnBvBD,EAAKS,KAAI,SAACC,EAAIC,GAC5C,OAAQ,sBAA+BzB,UAAW,SAA1C,UACN,qBAAK0B,IAAKF,EAAE,MAAWG,IAAKH,EAAE,SAC9B,8BAAMA,EAAE,UAFQA,EAAE,MAAYC,OAkB+BP,SC4CtDU,E,kDAxDb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAORC,QARmB,aAUZjC,aAAe,SAACkC,GACrB,IAAIC,EAAW,CAAE,MAAS,IAG1B,GADA,EAAKC,SAAS,CAAEC,UAAU,KACrBH,EAGH,OAFAC,EAAQ,MAAY,6BACpB,EAAKC,SAAS,CAAElB,OAAQiB,EAAUE,UAAU,IAI9CC,MAAM,kCAAD,OAAmC,EAAKL,QAAxC,cAAqDC,IACvDK,MAAK,SAAAC,GAAI,OAAIA,KACbD,MAAK,SAAAC,GAAI,OAAIA,EAAKC,UAClBF,MAAK,SAAAG,GACAA,EAAQ,OACV,EAAKN,SAAS,CAAElB,OAAQwB,EAAQ,OAAYL,UAAU,IAGtD,EAAKD,SAAS,CAAElB,OAAQwB,EAAUL,UAAU,OAG/CM,OAAM,YAAkB,IAAfC,EAAc,EAAdA,QACRC,QAAQC,IAAIF,OA9BhB,EAAKR,SAAS,CACZlB,OAAQ,GACRmB,UAAU,IAJK,E,qDAqCjB,IAAIU,EAAeC,KAAKC,MAAQD,KAAKC,MAAM/B,OAAS,GAChDmB,GAAWW,KAAKC,OAAQD,KAAKC,MAAMZ,SACvC,OACE,qBAAKlC,UAAU,MAAf,SACE,qBAAKA,UAAU,oBAAf,SAEE,8BACE,eAAC+C,EAAA,EAAD,WACE,cAAC,EAAD,CAAalD,aAAcgD,KAAKhD,eAChC,cAAC,EAAD,CAASkB,OAAQ6B,EAAc3B,UAAWiB,iB,GA/CtCc,IAAMC,WCFTC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBhB,MAAK,YAAkD,IAA/CiB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,MCCdO,IAASC,OACL,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEJC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.3be95557.chunk.js","sourcesContent":["import Form from 'react-bootstrap/Form';\nimport * as _ from 'underscore';\nimport './SearchField.css';\n\nconst SearchField = ({ fetchForData }) => {\n  const handleInputThrottled = _.throttle(fetchForData, 1500);\n\n  return (\n    <div className={\"searchBar\"}>\n      <Form.Group controlId=\"movieInput\">\n        <Form.Label column='lg'>Search Your favourite movie</Form.Label>\n        <Form.Control\n          type=\"text\"\n          name=\"movie\"\n          onChange={(event) => { handleInputThrottled(event.target.value); }}\n        />\n      </Form.Group>\n    </div>\n\n  )\n}\n\nexport default SearchField;","import Spinner from 'react-bootstrap/Spinner';\n\nimport './Gallery.css';\n\nconst Gallery = ({ movies, isLoading }) => {\n  let shouldShowSpinner = isLoading ? false : true;\n\n  let showListOfMovies = (list): JSX.Element[] => {\n    let listMovies: JSX.Element[] = list.map((el, index) => {\n      return (<div key={el['Title'] + index} className={'poster'}>\n        <img alt={el['Title']} src={el['Poster']} />\n        <div>{el['Title']}</div>\n      </div>\n      );\n    });\n    return listMovies\n  }\n  \n  let errorHandler = movies && movies['Error'] ? movies['Error'] : [];\n\n  return (\n    <div className={'spinner'}>\n      {shouldShowSpinner &&\n        <Spinner animation=\"border\" role=\"status\">\n          <span className=\"sr-only\">Loading...</span>\n        </Spinner>}\n\n      <div>{movies && movies.length > 0 ? showListOfMovies(movies) : errorHandler}</div>\n\n    </div>\n\n  )\n}\n\nexport default Gallery","import React from 'react';\nimport './App.css';\nimport Jumbotron from 'react-bootstrap/Jumbotron'\n\nimport SearchField from './components/SearchField/SearchField';\nimport Gallery from './components/Gallery/Gallery';\n\ninterface Myprops {\n};\n\ninterface MyState {\n  movies: any;\n  isLoaded: boolean;\n}\nclass App extends React.Component<Myprops, MyState> {\n  constructor(props) {\n    super(props);\n    this.setState({\n      movies: [],\n      isLoaded: true\n    });\n  }\n\n  API_KEY = `ce762116`;\n\n  public fetchForData = (param) => {\n    let notEmpty = { 'Error': '' };\n\n    this.setState({ isLoaded: false });\n    if (!param) {\n      notEmpty['Error'] = \"Field Cannot be Empty\";\n      this.setState({ movies: notEmpty, isLoaded: true })\n      return;\n    }\n\n    fetch(`http://www.omdbapi.com/?apikey=${this.API_KEY}&s=${param}`)\n      .then(resp => resp)\n      .then(resp => resp.json())\n      .then(response => {\n        if (response['Search']) {\n          this.setState({ movies: response['Search'], isLoaded: true })\n\n        } else {\n          this.setState({ movies: response, isLoaded: true })\n        }\n      })\n      .catch(({ message }) => {\n        console.log(message);\n      })\n  }\n\n  render() {\n    let moviesToPass = this.state ? this.state.movies : [];\n    let isLoaded = this.state ? this.state.isLoaded : true;\n    return (\n      <div className='App'>\n        <div className=\"content-container\">\n\n          <div>\n            <Jumbotron>\n              <SearchField fetchForData={this.fetchForData} />\n              <Gallery movies={moviesToPass} isLoading={isLoaded} />\n            </Jumbotron>\n          </div>\n\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\nReactDOM.render(\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}